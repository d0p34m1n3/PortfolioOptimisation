{
    "contents" : "rm(list=ls())\n\nObjectDir <- 'F:/MindlessInvesting/R/Objects'\nScriptDir <- 'D:/MindlessInvesting/R/Scripts'\nConnectionString <- 'Server=CICERO\\\\SQLPROD;Database=MindlessInvesting;Trusted_Connection=True;Connection Timeout=600'\n\nDivinationEntityId <- 1326696 # General Fundamentals\nPortfolioEntityId <- 324893 # Portfolio A\nDate <- '2014-08-08'\nNoOfCandidatesToDownload <- 100\nNoOfPositionsToKeep <- 100\nTargetBeta <- 0.5\nTargetVolatility <- 0.20\nMaxPositionSize <- 0.05\nMaxLeverage <- 4\nPredictedMarketReturn <- 0.001\nPredictedMarketDispersion <- 0.03 * 0.06 # 0.06 is the expected correlation.  In SH2 this might not be needed (unless I use override).\nPredictedMarketVolatility <- 0.18/sqrt(252)\nReturnDamper <- 0.25\nVolatilityDamper <- 0.25\n\nBeep <- function(n=3) {\n  for (i in seq(n)) {\n    system(\"rundll32 user32.dll, MessageBeep -1\")\n    Sys.sleep(.5)\n  }\n}\n\nrequire(VGAM)\nrequire(rsqlserver)\nrequire(DBI)\nrequire(caret)\nrequire(MASS)\nrequire(car)\nrequire(doParallel)\nrequire(scales)\nrequire(dplyr)\nrequire(tidyr)\n\ncat(\"PORTFOLIO OPTIMISATION SETUP\\n\")\n\n# Load all Common Functions\n#source(sprintf(\"%s/CommonFunctions.R\", ScriptDir))\nLog <- function(message, ...) cat(format(Sys.time(), \"%H:%M:%S\"), \"-\", sprintf(message, ...), \"\\n\")\n\n# Connect to SQL Server\nMDC <- dbConnect(\"SqlServer\", url=ConnectionString)\nLog(\"Connected to SQL Server\")\n\n# Download Divination\nDivination <-\n  dbGetQuery(MDC, paste(sep=\"\\n\",\n                        sprintf(\"select EntityId, Name, ShortName, SourceView, \"),\n                        sprintf(\"PeriodType, GroupingLevel\"),\n                        sprintf(\"from DivinationsPlus where EntityId = %i\", DivinationEntityId)\n                        ))\nLog(\"Divination: %s (%s)\", Divination$Name, DivinationEntityId)\n\n# Download Portfolio Entity\nPortfolioEntity <-\n  dbGetQuery(MDC,\n             paste(sep=\"\\n\",\n                   sprintf(\"select EntityId, Symbol, Name\"),\n                   sprintf(\"from Entities\"),\n                   sprintf(\"where EntityId = %i\", PortfolioEntityId)\n                   ))\nLog(\"Portfolio: %s (%s)\", PortfolioEntity$Name, PortfolioEntityId)\n\n#Download Portfolio Positions\nPortfolioPositions <-\n  dbGetQuery(MDC,\n             paste(sep=\"\\n\",\n                   sprintf(\"select PP.EntityId, E.Symbol, \"),\n                   sprintf(\"convert(float, sum(PP.Quantity)) as CurrentQuantity, avg(PP.Price) as Price, sum(PP.Amount) as CurrentAmount,\"),\n                   sprintf(\"avg(coalesce(R.%sPrediction * %f, 0)) as ReturnPrediction, \", Divination$ShortName, 1-ReturnDamper),\n                   sprintf(\"avg(coalesce(exp(log(R.%sStdDev) * %f), 1)) as VolatilityPrediction, \", Divination$ShortName, 1-VolatilityDamper),\n                   sprintf(\"coalesce(exp(PC.ActualNext1WLogChange)-1, -999) as ActualReturn\", Divination$ShortName),\n                   sprintf(\"from PortfolioPositionsByDatePlus PP\"),\n                   sprintf(\"join Entities E\"),\n                   sprintf(\"on E.EntityId = PP.EntityId\"),\n                   sprintf(\"and E.EntityType <> 'X'\"),\n                   sprintf(\"left outer join %sRankings R\", Divination$SourceView),\n                   sprintf(\"on R.EntityId = PP.EntityId\"),\n                   sprintf(\"and R.Date = PP.Date\", Date),\n                   sprintf(\"and R.%sPrediction is not null\", Divination$ShortName),\n                   sprintf(\"and R.%sStdDev > 0\", Divination$ShortName),\n                   sprintf(\"left outer join PriceChanges PC\"),\n                   sprintf(\"on PC.EntityId = PP.EntityId\"),\n                   sprintf(\"and PC.Date = PP.Date\"),\n                   sprintf(\"where PP.PortfolioEntityId = %i\", PortfolioEntityId),\n                   sprintf(\"and PP.Date = '%s'\", Date),\n                   sprintf(\"group by PP.EntityId, E.Symbol, PC.ActualNext1WLogChange\")\n             ))\nPortfolioPositions$ActualReturn[PortfolioPositions$ActualReturn==-999] <- NA_real_\nLog(\"Portfolio Positions: %s\", paste(sort(PortfolioPositions$Symbol), collapse=\", \"))\n\n#Download Long Candidates\nLongCandidates <-\n  dbGetQuery(MDC,\n             paste(sep=\"\\n\",\n                   sprintf(\"select top %i R.EntityId, E.Symbol, \", NoOfCandidatesToDownload / 2),\n                   sprintf(\"0 as CurrentQuantity, PC.AdjClose as Price, 0 as CurrentAmount,\"),\n                   sprintf(\"coalesce(R.%sPrediction * %f, 0) as ReturnPrediction, \", Divination$ShortName, 1-ReturnDamper),\n                   sprintf(\"coalesce(exp(log(R.%sStdDev) * %f), 1) as VolatilityPrediction, \", Divination$ShortName, 1-VolatilityDamper),\n                   sprintf(\"coalesce(exp(PC.ActualNext1WLogChange)-1, -999) as ActualReturn\", Divination$ShortName),\n                   sprintf(\"from %sRankings R\", Divination$SourceView),\n                   sprintf(\"join Entities E\"),\n                   sprintf(\"on E.EntityId = R.EntityId\"),\n                   sprintf(\"left outer join PriceChanges PC\"),\n                   sprintf(\"on PC.EntityId = R.EntityId\"),\n                   sprintf(\"and PC.Date = R.Date\"),\n                   sprintf(\"where R.PassesFilter = 1\"),\n                   sprintf(\"and R.Passes%sFilter = 1\", Divination$Name),\n                   sprintf(\"and R.Date = '%s'\", Date),\n                   sprintf(\"and R.%sPrediction is not null\", Divination$ShortName),\n                   sprintf(\"and R.%sStdDev > 0\", Divination$ShortName),\n                   sprintf(\"and R.EntityId not in (%s)\", paste(PortfolioPositions$EntityId, collapse=\", \")),\n                   sprintf(\"order by R.%sPrediction * %f / exp(log(R.%sStdDev) * %f) desc\",\n                           Divination$ShortName, 1-ReturnDamper, Divination$ShortName, 1-VolatilityDamper)\n             ))\nLog(\"Long Candidates: %s\", paste(sort(LongCandidates$Symbol), collapse=\", \"))\nLongCandidates$ActualReturn[LongCandidates$ActualReturn==-999] <- NA_real_\n\n#Download Long Candidates\nShortCandidates <-\n  dbGetQuery(MDC,\n             paste(sep=\"\\n\",\n                   sprintf(\"select top %i R.EntityId, E.Symbol, \", NoOfCandidatesToDownload / 2),\n                   sprintf(\"0 as CurrentQuantity, PC.AdjClose as Price, 0 as CurrentAmount,\"),\n                   sprintf(\"coalesce(R.%sPrediction * %f, 0) as ReturnPrediction, \", Divination$ShortName, 1-ReturnDamper),\n                   sprintf(\"coalesce(R.%sStdDev, 1) as VolatilityPrediction, \", Divination$ShortName, 1-VolatilityDamper),\n                   sprintf(\"coalesce(exp(PC.ActualNext1WLogChange)-1, -999) as ActualReturn\", Divination$ShortName),\n                   sprintf(\"from %sRankings R\", Divination$SourceView),\n                   sprintf(\"join Entities E\"),\n                   sprintf(\"on E.EntityId = R.EntityId\"),\n                   sprintf(\"left outer join PriceChanges PC\"),\n                   sprintf(\"on PC.EntityId = R.EntityId\"),\n                   sprintf(\"and PC.Date = R.Date\"),\n                   sprintf(\"where R.PassesFilter = 1\"),\n                   sprintf(\"and R.Passes%sFilter = 1\", Divination$Name),\n                   sprintf(\"and R.Date = '%s'\", Date),\n                   sprintf(\"and R.%sPrediction is not null\", Divination$ShortName),\n                   sprintf(\"and R.%sStdDev > 0\", Divination$ShortName),\n                   sprintf(\"and R.EntityId not in (%s)\", paste(PortfolioPositions$EntityId, collapse=\", \")),\n                   sprintf(\"order by R.%sPrediction * %f / exp(log(R.%sStdDev) * %f)\",\n                           Divination$ShortName, 1-ReturnDamper, Divination$ShortName, 1-VolatilityDamper)\n             ))\nLog(\"Short Candidates: %s\", paste(sort(ShortCandidates$Symbol), collapse=\", \"))\nShortCandidates$ActualReturn[ShortCandidates$ActualReturn==-999] <- NA_real_\n\n# Create Candidates Table\nCandidates <- rbind(PortfolioPositions, LongCandidates, ShortCandidates)\nCandidates <- Candidates[order(Candidates$Symbol), ]\n\n# Download Price Changes\nReturns <-\n  dbGetQuery(MDC,\n             paste(sep=\"\\n\",\n                   sprintf(\"select D.Date,\"),\n                   paste(paste0(\"coalesce(avg(iif(P.EntityId = \", Candidates$EntityId, \", P.AdjLogChange, null)), -999) as \\\"\",\n                                Candidates$Symbol), \"\\\"\", collapse=\",\\n\"),\n                   sprintf(\"from DailyDates D\"),\n                   sprintf(\"left outer join Prices P\"),\n                   sprintf(\"on P.Date = D.Date\"),\n                   sprintf(\"where D.Date between DateAdd(year, -3, '%s') and '%s'\", Date, Date),\n                   sprintf(\"and P.EntityId in (%s)\", paste(Candidates$EntityId, collapse=\", \")),\n                   sprintf(\"group by D.Date\"),\n                   sprintf(\"order by D.Date desc\")\n             ),\n             commandTimeout=600)\nfor (Symbol in names(Returns[-1]))\n  Returns[Returns[, Symbol] == -999, Symbol] <- NA_real_\nLog(\"Returns downloaded for the past 3 years: %s\", prettyNum(nrow(Returns), digits=0, big.mark=\",\"))\n\n\n# Get the Portfolio Value\nPortfolioValue <- dbGetQuery(MDC, sprintf(\"select NetValue from PortfolioValues where PortfolioEntityId = %i and Date = '%s'\",\n                                          PortfolioEntityId, Date))[1, 1]\nLog(\"PortfolioValue: %s\", formatC(PortfolioValue, format=\"d\", big.mark=\",\"))\n\n# Close Connection\ndbDisconnect(MDC)",
    "created" : 1426430799174.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1510949210",
    "id" : "3E25B228",
    "lastKnownWriteTime" : 1426459863,
    "path" : "D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationSetup.R",
    "project_path" : "PortfolioOptimisationSetup.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}