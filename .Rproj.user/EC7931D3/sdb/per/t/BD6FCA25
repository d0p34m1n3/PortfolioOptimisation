{
    "contents" : "NoOfSymbols <- length(Symbols)\nCov <- cov(Returns)\nCov  <-  Cov *  (matrix(0.5, nrow=NoOfSymbols, ncol=NoOfSymbols) + 0.5 * diag(NoOfSymbols)) # Deflate Covariance Matrix\nPCACov <- cov(Returns %*% PCAModel$rotation)\n\n# FIX\n#Steps <- rbind(diag(100, NoOfSymbols), diag(-100, NoOfSymbols))\nSteps <- rbind(diag(1000, NoOfSymbols), diag(-1000, NoOfSymbols))\nClosePositionMultiplier <- matrix(1, nrow=NoOfSymbols, ncol=NoOfSymbols) - diag(NoOfSymbols)\n\nCalcTransCost <- function(PriceTrading, Shares, AvgDailyShares, AnnualVolatility) {\n  InstantImpact1  = 35 * (100 * abs(Shares) / AvgDailyShares) ^ 0.65 + 0.3 * (10000 * AnnualVolatility / sqrt(252)) + 15\n  InstantImpact2  = 25 * (100 * abs(Shares) / AvgDailyShares) ^ 0.38 * (10000 * AnnualVolatility / sqrt(252)) ^ 0.28\n  InstantImpact  = (InstantImpact1 + InstantImpact2) / 2\n  MarketImpactCost  = InstantImpact * (0.95 * abs(Shares) / (abs(Shares) + AvgDailyShares / 2) + 0.05)\n  PriceMovementCost   = 0\n  FixedBrokerageCostBPS  = 0\n  FixedBrokerageCostCents  = 1.75\n\n  return ((MarketImpactCost + PriceMovementCost  + FixedBrokerageCostBPS) / 10000 + FixedBrokerageCostCents / PriceTrading / 100)\n}\n\nUtilityFunction <- function(Quantities) {\n  Leverage <- as.numeric(sum(abs(Quantities) * Candidates$Price) / PortfolioValue)\n  Beta <- as.numeric(sum(Quantities * Candidates$Price * Candidates$BetaPrediction) / PortfolioValue)\n  ExpectedReturn <- ((1 + 0.10 * pmax(Leverage, 1)) ^ (1 / PeriodsPerYear) - 1)\n  LongPositions <- sum(Quantities > 0)\n  ShortPositions <- sum(Quantities < 0)\n\n  SD <- as.numeric(sqrt(t(Quantities * Candidates$Price) %*% Cov %*% (Quantities * Candidates$Price) / PortfolioValue^2 * (252 / PeriodsPerYear)))\n  PCA_SD <- as.numeric(sqrt(t(Quantities * Candidates$Price) %*% PCAModel$rotation %*% PCACov %*% t(t(Quantities * Candidates$Price) %*% PCAModel$rotation) / PortfolioValue^2 * 252 / PeriodsPerYear))\n  UseSD <- pmax(PCA_SD, SD)\n\n  Return  <- as.numeric(sum(Quantities * Candidates$Price * Candidates$ReturnPrediction) / PortfolioValue)\n\n  LeveragePenalty <-\n    if (Leverage > MaxLeverage) -Inf else\n      (0.05 + -0.05 / (1 - (Leverage / MaxLeverage))) * ExpectedReturn\n\n  PositionSizePenalty <- if(any(abs(Quantities * Candidates$Price) > MaxPositionSize * pmax(Leverage, 1) * PortfolioValue)) -Inf else 0\n\n  TargetVolatilityPenalty <- if(UseSD == 0) -Inf else -log(UseSD * sqrt(PeriodsPerYear) / TargetVolatility)^2 * 20 * ExpectedReturn\n\n  TransactionCostPenalty <- -2 * sum(CalcTransCost(Candidates$TCPriceTrading, abs(Candidates$CurrentQuantity - Quantities), Candidates$TCAvgVolume, Candidates$TCVolatility) * abs(Candidates$CurrentQuantity - Quantities) * Candidates$Price) / PortfolioValue\n\n  UtilityScore <-\n    if(UseSD == 0) -Inf else\n      Return / UseSD * sqrt(PeriodsPerYear) +\n    (LeveragePenalty + PositionSizePenalty + TargetVolatilityPenalty + TransactionCostPenalty) / pmax(UseSD * sqrt(PeriodsPerYear), TargetVolatility)\n\n  Utility <- data.frame(NoOfLongPositions=LongPositions, NoOfShortPositions=ShortPositions, Leverage=Leverage, Beta=Beta,\n                        SD=SD, PCA_SD=PCA_SD, Return=Return, LeveragePenalty=LeveragePenalty,\n                        TargetVolatilityPenalty=TargetVolatilityPenalty, PositionSizePenalty=PositionSizePenalty,\n                        TransactionCostPenalty=TransactionCostPenalty, Score=UtilityScore)\n}\n\nQuantities <- Candidates$CurrentQuantity\nBestUtility <- UtilityFunction(Quantities)\nUtility <- BestUtility\nIteration <- 0\nIterations <- data.frame()\nMaxPositionsUtility <- BestUtility\nMaxPositionsQuantities <- numeric()\n\nrepeat {\n  Iterations <- rbind(Iterations, data.frame(Iteration=Iteration, Utility=BestUtility))\n  Iteration <- Iteration + 1\n  NewQuantities <- rep(1, times = 2 * NoOfSymbols) %*% t(Quantities) + Steps\n  for (i in 1:(2 * NoOfSymbols)) {\n    NewQuantities[i, NewQuantities[i, ] != 0 & abs(NewQuantities[i, ]) * Candidates$Price * Candidates$BetaPrediction <\n                       sum(abs(NewQuantities[i, ] * Candidates$Price)) / NoOfPositionsToKeep / 4 &\n                     abs(NewQuantities[i, ]) < abs(Quantities)] <- 0\n\n  }\n  NewUtilities <- foreach (Row = 1:nrow(NewQuantities), .combine=rbind) %do% UtilityFunction(NewQuantities[Row, ])\n  NewUtility <- NewUtilities[NewUtilities$Score == max(NewUtilities$Score), ]\n  if (NewUtility$Score <= BestUtility$Score) {\n    break\n  }\n  BestUtility <- NewUtility\n  Quantities <- NewQuantities[NewUtilities$Score==BestUtility$Score,]\n  if (!is.null(nrow(Quantities)))\n    if (nrow(Quantities) > 1) {\n      Quantities <- Quantities[1, ]\n    }\n\n  if (sum(Quantities != 0) >= NoOfPositionsToKeep) {\n    if (BestUtility$Score <= MaxPositionsUtility$Score) {\n      BestUtility <- MaxPositionsUtility\n      Quantities <- MaxPositionsQuantities\n      break\n    }\n    else {\n      MaxPositionsUtility <- BestUtility\n      MaxPositionsQuantities <- Quantities\n\n      for (j in 1:(NoOfPositionsToKeep / 10)) {\n        NewQuantities <- ((rep(1, times = NoOfSymbols) %*% t(Quantities)) * ClosePositionMultiplier)[Quantities != 0, ]\n        NewUtilities <- foreach (Row = 1:nrow(NewQuantities), .combine=rbind) %do% UtilityFunction(NewQuantities[Row, ])\n        NewUtility <- NewUtilities[NewUtilities$Score == max(NewUtilities$Score), ]\n        Quantities <- NewQuantities[NewUtilities$Score==NewUtility$Score,]\n        if (!is.null(nrow(Quantities)))\n          if (nrow(Quantities) > 1) {\n            Quantities <- Quantities[1, ]\n          }\n      }\n      BestUtility <- NewUtility\n    }\n  }\n\n  cat(sprintf(\"%i : Long=%i, Shorts=%i, Leverage=%.1f, Beta=%.1f, Return=%.1f%%, SD=%.1f%%, PCA-SD=%.1f%%, LeveragePen=%.2f%%, TargetVolPen=%.2f%%, TransCostPen==%.2f%%, Score=%.3f\\n\",\n              Iteration, BestUtility$NoOfLongPositions, BestUtility$NoOfShortPositions, BestUtility$Leverage, BestUtility$Beta,\n              100*(((BestUtility$Return + 1) ^ 2 - pmax(BestUtility$SD, BestUtility$PCA_SD)^2)^(PeriodsPerYear / 2) - 1),\n              100*BestUtility$SD*sqrt(PeriodsPerYear), 100*BestUtility$PCA_SD*sqrt(PeriodsPerYear),\n              100*BestUtility$LeveragePenalty, 100*BestUtility$TargetVolatilityPenalty, 100*BestUtility$TransactionCostPenalty, BestUtility$Score))\n}\n",
    "created" : 1427460639958.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "51089814",
    "id" : "BD6FCA25",
    "lastKnownWriteTime" : 1430929335,
    "path" : "D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationPerform2.R",
    "project_path" : "PortfolioOptimisationPerform2.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "source_on_save" : false,
    "type" : "r_source"
}