20%
source('D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationSetup.R')
Divination <- dbGetQuery(MDC, sep="\n",
paste(sprintf("select EntityId, Name, ShortName, SourceViewEntityId, "),
sprintf("PeriodType, GroupingLevel"),
sprintf("from Divinations where EntityId = %i", DivinationEntityId)
))
Log("Divination: %s (%s)", Divination$Name, DivinationEntityId)
# Download Portfolio Entity
PortfolioEntity <- dbGetQuery(MDC, sep="\n",
paste(sprintf("select EntityId, Symbol, Name"),
sprintf("from Entities"),
sprintf("where EntityId = %i", PortfolioEntityId)
))
Log("Portfolio: %s (%s)", PortfolioEntity$Name, PortfolioEntityId)
#Download Portfolio Positions
PortfolioPositions <- dbGetQuery(MDC, sep="\n",
paste(sprintf("select EntityId, Symbol, Quantity, Price, Amount"),
sprintf("from PortfolioPositionsByDatePlus"),
sprintf("where PortfolioEntityId = ", PortfolioEntityId),
sprintf("and Date = '%s'", Date)
))
PortfolioPositions <- dbGetQuery(MDC, sep="\n",
paste(sprintf("select EntityId, Symbol, Quantity, Price, Amount"),
sprintf("from PortfolioPositionsByDatePlus"),
sprintf("where PortfolioEntityId = %i", PortfolioEntityId),
sprintf("and Date = '%s'", Date)
))
cat(Script)
cat(paste(sep="\n",
sprintf("select top %i R.EntityId, E.Symbol, ", NoOfCandidatesToDownload / 2),
sprintf("0 as CurrentQuantity, P.AdjClose as Price, 0 as CurrentAmount,"),
sprintf("power(1+R.%sPrediction, 0.25)-1 as ReturnPrediction, ", Divination$ShortName),
sprintf("power(1+R.%sStdDev, 0.25)-1 as VolatilityPrediction", Divination$ShortName),
sprintf("from StockHistoryRankings R"),
sprintf("join Entities E"),
sprintf("on E.EntityId = R.EntityId"),
sprintf("join Prices P"),
sprintf("on P.EntityId = R.EntityId"),
sprintf("and P.Date = (select max(Date) from Prices where EntityId = R.EntityId and Date <= '%s'", Date),
sprintf("where R.PassesFilter = 1"),
sprintf("and R.Passes%sFilter = 1", Divination$Name),
sprintf("and %sPrediction is not null", Divination$ShortName),
sprintf("order by %sPrediction desc", Divination$ShortName)
))
source('D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationSetup.R')
cat(paste(sep="\n",
sprintf("select EntityId, Symbol, Quantity, Price, Amount"),
sprintf("from PortfolioPositionsByDatePlus"),
sprintf("where PortfolioEntityId = %i", PortfolioEntityId),
sprintf("and Date = '%s'", Date)
))
PortfolioPositions <-
dbGetQuery(MDC,
paste(sep="\n",
sprintf("select EntityId, Symbol, Quantity, Price, Amount"),
sprintf("from PortfolioPositionsByDatePlus"),
sprintf("where PortfolioEntityId = %i", PortfolioEntityId),
sprintf("and Date = '%s'", Date)
))
dbDisconnect(MDC)
LongCandidates <-
dbGetQuery(MDC,
paste(sep="\n",
sprintf("select top %i R.EntityId, E.Symbol, ", NoOfCandidatesToDownload / 2),
sprintf("0 as CurrentQuantity, P.AdjClose as Price, 0 as CurrentAmount,"),
sprintf("R.%sPrediction as ReturnPrediction, ", Divination$ShortName),
sprintf("R.%sStdDev as VolatilityPrediction", Divination$ShortName),
sprintf("from StockHistoryRankings R"),
sprintf("join Entities E"),
sprintf("on E.EntityId = R.EntityId"),
sprintf("join Prices P"),
sprintf("on P.EntityId = R.EntityId"),
sprintf("and P.Date = (select max(Date) from Prices where EntityId = R.EntityId and Date <= '%s'", Date),
sprintf("where R.PassesFilter = 1"),
sprintf("and R.Passes%sFilter = 1", Divination$Name),
sprintf("and R.Date = '%s'", Date),
sprintf("and %sPrediction is not null", Divination$ShortName),
sprintf("order by %sPrediction desc", Divination$ShortName)
))
source('D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationSetup.R')
#Download Portfolio Positions
PortfolioPositions <-
dbGetQuery(MDC,
paste(sep="\n",
sprintf("select EntityId, Symbol, convert(float, Quantity) as Quantity, Price, Amount"),
sprintf("from PortfolioPositionsByDatePlus"),
sprintf("where PortfolioEntityId = %i", PortfolioEntityId),
sprintf("and Date = '%s'", Date)
))
Log("No of Portfolio Positions: %i", nrow(PortfolioPositions))
source('~/.active-rstudio-document')
#Download Long Candidates
LongCandidates <-
dbGetQuery(MDC,
paste(sep="\n",
sprintf("select top %i R.EntityId, E.Symbol, ", NoOfCandidatesToDownload / 2),
sprintf("0 as CurrentQuantity, P.AdjClose as Price, 0 as CurrentAmount,"),
sprintf("R.%sPrediction as ReturnPrediction, ", Divination$ShortName),
sprintf("R.%sStdDev as VolatilityPrediction", Divination$ShortName),
sprintf("from StockHistoryRankings R"),
sprintf("join Entities E"),
sprintf("on E.EntityId = R.EntityId"),
sprintf("join Prices P"),
sprintf("on P.EntityId = R.EntityId"),
sprintf("and P.Date = (select max(Date) from Prices where EntityId = R.EntityId and Date <= '%s')", Date),
sprintf("where R.PassesFilter = 1"),
sprintf("and R.Passes%sFilter = 1", Divination$Name),
sprintf("and R.Date = '%s'", Date),
sprintf("and %sPrediction is not null", Divination$ShortName),
sprintf("order by %sPrediction desc", Divination$ShortName)
))
Log("No of Long Candidates: %i", nrow(PortfolioPositions))
cat(paste(sep="\n",
sprintf("select R.EntityId, E.Symbol, "),
sprintf("convert(float, PP.Quantity) as CurrentQuantity, P.PricePrice, P.Amount as CurrentAmount,"),
sprintf("R.%sPrediction as ReturnPrediction, ", Divination$ShortName),
sprintf("R.%sStdDev as VolatilityPrediction", Divination$ShortName),
sprintf("from PortfolioPositionsByDatePlus PP"),
sprintf("join Entities E"),
sprintf("on E.EntityId = PP.EntityId"),
sprintf("and E.EntityType = PP.EntityType"),
sprintf("left outer join %sRankings R", Divination$SourceView),
sprintf("on R.EntityId = R.EntityId"),
sprintf("and R.Date = PP.Date", Date),
sprintf("and R.%sPrediction is not null", Divination$ShortName),
sprintf("where PP.PortfolioEntityId = %i", PortfolioEntityId),
sprintf("and PP.Date = '%s'", Date),
sprintf("order by R.%sRiskReward desc", Divination$ShortName)
))
source('D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationSetup.R')
View(LongCandidates)
Divination$PeriodType
source('~/.active-rstudio-document')
View(PortfolioPositions)
View(LongCandidates)
mean(LongCandidates$ActualReturn)
source('D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationSetup.R')
mean(ShortPositions$ActualReturn)
mean(ShortCandidates$ActualReturn)
mean(LongCandidates$ActualReturn)
mean(PortfolioPositions$ActualReturn)
source('D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationSetup.R')
source('~/.active-rstudio-document')
mean(PortfolioPositions$ActualReturn)
mean(PortfolioPositions$ActualReturn, ra.rm=T)
mean(PortfolioPositions$ActualReturn, na.rm=T)
sum(PortfolioPositions$ActualReturn*PortfolioPositions$Amount, na.rm=T)
sum(PortfolioPositions$ActualReturn*PortfolioPositions$CurrentAmount, na.rm=T)
View(ShortCandidates)
source('D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationSetup.R')
source('~/.active-rstudio-document')
View(Candidates)
source('D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationSetup.R')
paste0("coalesce(avg(case when P.EntityId = ", Candidates$EntityId, ' then ' Candidates$Symbol, ".AdjLogChange else null end), -999) as ", Candidates$Symbol)
paste0("coalesce(avg(case when P.EntityId = ", Candidates$EntityId, " then ", Candidates$Symbol, ".AdjLogChange else null end), -999) as ", Candidates$Symbol)
edit(paste(sep="\n",
sprintf("D.Date,"),
paste(paste0("coalesce(avg(iif(P.EntityId = ", Candidates$EntityId, " then P.AdjLogChange, null)), -999) as ", Candidates$Symbol), collapse=",\n"),
sprintf("from DailyDates D"),
sprintf("left outer join Prices P"),
sprintf("on P.Date = D.Date"),
sprintf("where D.Date between DateAdd(year, -3, '%s') and '%s'", Date, Date),
sprintf("and P.EntityId in (%s)", paste(Candidates$EntityId, collapse=", ")),
sprintf("order by D.Date desc")
))
View(paste(sep="\n",
sprintf("select D.Date,"),
paste(paste0("coalesce(avg(iif(P.EntityId = ", Candidates$EntityId, " then P.AdjLogChange, null)), -999) as ", Candidates$Symbol), collapse=",\n"),
sprintf("from DailyDates D"),
sprintf("left outer join Prices P"),
sprintf("on P.Date = D.Date"),
sprintf("where D.Date between DateAdd(year, -3, '%s') and '%s'", Date, Date),
sprintf("and P.EntityId in (%s)", paste(Candidates$EntityId, collapse=", ")),
sprintf("order by D.Date desc")
))
source('D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationSetup.R')
View(Returns)
qchisq(0.997, df=2)
source('D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationSetup.R')
cat(paste(sep="\n",
sprintf("select PP.EntityId, E.Symbol, "),
sprintf("convert(float, PP.Quantity) as CurrentQuantity, PP.Price, PP.Amount as CurrentAmount,"),
sprintf("coalesce(R.%sPrediction, 0) as ReturnPrediction, ", Divination$ShortName),
sprintf("coalesce(R.%sStdDev, 0) as VolatilityPrediction, ", Divination$ShortName),
#                    sprintf("coalesce(exp(log(1+R.%sPrediction)*%f)-1, 0) as ReturnPrediction, ", Divination$ShortName, 1-ReturnDamper),
#                    sprintf("coalesce(exp(log(R.%sStdDev)*%f), 1) as VolatilityPrediction, ", Divination$ShortName, 1-VolatilityDamper),
sprintf("coalesce(exp(PC.ActualNext1WLogChange)-1, -999) as ActualReturn", Divination$ShortName),
sprintf("from PortfolioPositionsByDatePlus PP"),
sprintf("join Entities E"),
sprintf("on E.EntityId = PP.EntityId"),
sprintf("and E.EntityType <> 'X'"),
sprintf("left outer join %sRankings R", Divination$SourceView),
sprintf("on R.EntityId = PP.EntityId"),
sprintf("and R.Date = PP.Date", Date),
sprintf("and R.%sPrediction is not null", Divination$ShortName),
sprintf("left outer join PriceChanges PC"),
sprintf("on PC.EntityId = PP.EntityId"),
sprintf("and PC.Date = PP.Date"),
sprintf("where PP.PortfolioEntityId = %i", PortfolioEntityId),
sprintf("and PP.Date = '%s'", Date)
))
source('D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationSetup.R')
View(PortfolioPositions)
source('~/.active-rstudio-document')
View(PortfolioPositions)
source('D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationSetup.R')
Symbol
source('D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationSetup.R')
View(Candidates)
source('D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationSetup.R')
View(Returns)
system.time(Cov <- cov(Returns[, -1]))
Cov
system.time(Cov <- cov(Returns[, -1], use="pairwise.complete.obs"))
Cov
system.time(Cor <- cor(Returns[, -1], use="pairwise.complete.obs"))
Cor
install.packages("PorformanceAnalytics")
install.packages("PerformanceAnalytics")
install.packages("PortfolioAnalytics",repos="http://r-forge.r-project.org")
install.packages("FactorAnalytics",repos="http://r-forge.r-project.org")
install.packages("factorAnalytics",repos="http://r-forge.r-project.org")
library(factorAnalytics)
install.packages("corrplot")
library(factorAnalytics)
install.packages("lmtest")
library(factorAnalytics)
install.packages("sandwich")
library(factorAnalytics)
install.packages("strucchange")
library(factorAnalytics)
source('D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationSetup.R')
Returns <-
dbGetQuery(MDC,
paste(sep="\n",
sprintf("select D.Date,"),
paste(paste0("coalesce(avg(iif(P.EntityId = ", Candidates$EntityId, ", P.AdjLogChange, null)), -999) as \"",
Candidates$Symbol), "\"", collapse=",\n"),
sprintf("from DailyDates D"),
sprintf("left outer join Prices P"),
sprintf("on P.Date = D.Date"),
sprintf("where D.Date between DateAdd(year, -3, '%s') and '%s'", Date, Date),
sprintf("and P.EntityId in (%s)", paste(Candidates$EntityId, collapse=", ")),
sprintf("group by D.Date"),
sprintf("order by D.Date desc")
),
CommandTimeout=600)
# Get the Portfolio Value
PortfolioValue <- dbGetQuery(MDC, sprintf("select NetValue from PortfolioValues where PortfolioEntityId = %i and Date = '%s'",
PortfolioEntityId, Date))
PortfolioValue[1, 1]
# Get the Portfolio Value
PortfolioValue <- dbGetQuery(MDC, sprintf("select NetValue from PortfolioValues where PortfolioEntityId = %i and Date = '%s'",
PortfolioEntityId, Date))[1, 1]
# Close Connection
dbDisconnect(MDC)
source('D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationSetup.R')
PortfolioValue <- dbGetQuery(MDC, sprintf("select NetValue from PortfolioValues where PortfolioEntityId = %i and Date = '%s'",
PortfolioEntityId, Date))[1, 1]
Log("PortfolioValue: %s", prettyNum(PortfolioValue, digits=0, big.mark=","))
PortfolioValue <- dbGetQuery(MDC, sprintf("select NetValue from PortfolioValues where PortfolioEntityId = %i and Date = '%s'",
PortfolioEntityId, Date))[1, 1]
Log("PortfolioValue: %s", prettyNum(PortfolioValue, digits=0, big.mark=",", format="F"))
PortfolioValue <- dbGetQuery(MDC, sprintf("select NetValue from PortfolioValues where PortfolioEntityId = %i and Date = '%s'",
PortfolioEntityId, Date))[1, 1]
Log("PortfolioValue: %s", prettyNum(PortfolioValue, digits=0, big.mark=",", format="f"))
PortfolioValue <- dbGetQuery(MDC, sprintf("select NetValue from PortfolioValues where PortfolioEntityId = %i and Date = '%s'",
PortfolioEntityId, Date))[1, 1]
Log("PortfolioValue: %s", prettyNum(PortfolioValue, digits=0, big.mark=",", format="i"))
PortfolioValue <- dbGetQuery(MDC, sprintf("select NetValue from PortfolioValues where PortfolioEntityId = %i and Date = '%s'",
PortfolioEntityId, Date))[1, 1]
Log("PortfolioValue: %s", prettyNum(PortfolioValue, digits=0, big.mark=",", width=10))
Log("PortfolioValue: %s", formatc(PortfolioValue, format="d", big.mark=","))
source('D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationSetup.R')
hist(Returns$Date)
unique(Returns$Date)
hist(Returns$Date, breaks=10)
?hist
hist(Returns$Date, breaks=10, freq=T)
table(Returns$EntityId)
source('D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationPerform.R')
