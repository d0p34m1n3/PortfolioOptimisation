(RankSummary %>% ggplot(aes(Ranking, RelChange, group=LongOrShort, colour=LongOrShort)) + geom_point() + stat_smooth()) %>% print
(RankSummary %>% ggplot(aes(Ranking, Count, group=LongOrShort, colour=LongOrShort)) + geom_bar(stat="identity") + stat_smooth()) %>% print
(RankSummary %>% ggplot(aes(Ranking, RelTotalChange, group=LongOrShort, colour=LongOrShort)) + geom_point() + stat_smooth()) %>% print
YearSummary <- PP %>% group_by(Year=year(Date), LongOrShort) %>% summarize(Amount=round(mean(abs(CurrentAmount), na.rm=T)), Alpha4W=mean(ActualAlpha4W*sign(CurrentAmount), na.rm=T), RelChange=round(mean(CurrentAmount * ActualAlpha4W, na.rm=T)), RelTotalChange=round(sum(CurrentAmount * ActualAlpha4W, na.rm=T)), Count=n())
(YearSummary %>% ggplot(aes(Year, Amount, group=LongOrShort, colour=LongOrShort)) + geom_point() + stat_smooth()) %>% print
(YearSummary %>% ggplot(aes(Year, Alpha4W, group=LongOrShort, colour=LongOrShort)) + geom_point() + stat_smooth()) %>% print
View(Script)
source('~/.active-rstudio-document')
source('D:/MindlessInvesting/R/Development/PortfolioOptimisation/PortfolioOptimisationPerform2.R')
source('D:/MindlessInvesting/R/Scripts/EquityModelPortfolioOptimisation.R')
CalcTransCost <- function(PriceTrading, Shares, AvgDailyShares, AnnualVolatility) {
AnnualVolatility[is.na(AnnualVolatility)] <- 0.5
PriceTrading[is.na(PriceTrading)] <- 10
AvgDailyShares[is.na(AvgDailyShares)] <- 1000000 / PriceTrading[is.na(AvgDailyShares)]
InstantImpact1  = 35 * (100 * abs(Shares) / AvgDailyShares) ^ 0.65 + 0.3 * (10000 * AnnualVolatility / sqrt(252)) + 15
InstantImpact2  = 25 * (100 * abs(Shares) / AvgDailyShares) ^ 0.38 * (10000 * AnnualVolatility / sqrt(252)) ^ 0.28
InstantImpact  = (InstantImpact1 + InstantImpact2) / 2
MarketImpactCost  = InstantImpact * (0.95 * abs(Shares) / (abs(Shares) + AvgDailyShares / 2) + 0.05)
PriceMovementCost   = 0
FixedBrokerageCostBPS  = 0
FixedBrokerageCostCents  = 1.75
return ((MarketImpactCost + PriceMovementCost  + FixedBrokerageCostBPS) / 10000 + FixedBrokerageCostCents / PriceTrading / 100)
}
UtilityFunction <- function(Quantities) {
Leverage <- as.numeric(sum(abs(Quantities) * Candidates$Price) / PortfolioValue)
Beta <- as.numeric(sum(Quantities * Candidates$Price * Candidates$BetaPrediction) / PortfolioValue)
ExpectedReturn <- ((1 + 0.10 * pmax(Leverage, 1)) ^ (1 / PeriodsPerYear) - 1)
LongPositions <- sum(Quantities > 0)
ShortPositions <- sum(Quantities < 0)
SD <- as.numeric(sqrt(t(Quantities * Candidates$Price) %*% Cov %*% (Quantities * Candidates$Price) / PortfolioValue^2 * (252 / PeriodsPerYear)))
PCA_SD <- as.numeric(sqrt(t(Quantities * Candidates$Price) %*% PCAModel$rotation %*% PCACov %*% t(t(Quantities * Candidates$Price) %*% PCAModel$rotation) / PortfolioValue^2 * 252 / PeriodsPerYear))
UseSD <- pmax(PCA_SD, SD)
Return  <- as.numeric(sum(Quantities * Candidates$Price * Candidates$ReturnPrediction) / PortfolioValue)
LeveragePenalty <-
if (Leverage > MaxLeverage) -Inf else
(0.05 + -0.05 / (1 - (Leverage / MaxLeverage))) * ExpectedReturn
PositionSizePenalty <- if(any(abs(Quantities * Candidates$Price) > MaxPositionSize * pmax(Leverage, 1) * PortfolioValue)) -Inf else 0
TargetVolatilityPenalty <- if(UseSD == 0) -Inf else -log(UseSD * sqrt(PeriodsPerYear) / TargetVolatility)^2 * 20 * ExpectedReturn
TransactionCostPenalty <- -2 * sum(CalcTransCost(Candidates$TCPriceTrading, abs(Candidates$CurrentQuantity - Quantities), Candidates$TCAvgVolume, Candidates$TCVolatility) * abs(Candidates$CurrentQuantity - Quantities) * Candidates$Price) / PortfolioValue
UtilityScore <-
if(UseSD == 0) -Inf else
Return / UseSD * sqrt(PeriodsPerYear) +
(LeveragePenalty + PositionSizePenalty + TargetVolatilityPenalty + TransactionCostPenalty) / pmax(UseSD * sqrt(PeriodsPerYear), TargetVolatility)
Utility <- data.frame(NoOfLongPositions=LongPositions, NoOfShortPositions=ShortPositions, Leverage=Leverage, Beta=Beta,
SD=SD, PCA_SD=PCA_SD, Return=Return, LeveragePenalty=LeveragePenalty,
TargetVolatilityPenalty=TargetVolatilityPenalty, PositionSizePenalty=PositionSizePenalty,
TransactionCostPenalty=TransactionCostPenalty, Score=UtilityScore)
}
Quantities <- Candidates$CurrentQuantity
Quantities
BestUtility <- UtilityFunction(Quantities)
BestUtility
UtilityFunction <- function(Quantities, IgnorePositionSize = F) {
Leverage <- as.numeric(sum(abs(Quantities) * Candidates$Price) / PortfolioValue)
Beta <- as.numeric(sum(Quantities * Candidates$Price * Candidates$BetaPrediction) / PortfolioValue)
ExpectedReturn <- ((1 + 0.10 * pmax(Leverage, 1)) ^ (1 / PeriodsPerYear) - 1)
LongPositions <- sum(Quantities > 0)
ShortPositions <- sum(Quantities < 0)
SD <- as.numeric(sqrt(t(Quantities * Candidates$Price) %*% Cov %*% (Quantities * Candidates$Price) / PortfolioValue^2 * (252 / PeriodsPerYear)))
PCA_SD <- as.numeric(sqrt(t(Quantities * Candidates$Price) %*% PCAModel$rotation %*% PCACov %*% t(t(Quantities * Candidates$Price) %*% PCAModel$rotation) / PortfolioValue^2 * 252 / PeriodsPerYear))
UseSD <- pmax(PCA_SD, SD)
Return  <- as.numeric(sum(Quantities * Candidates$Price * Candidates$ReturnPrediction) / PortfolioValue)
LeveragePenalty <-
if (Leverage > MaxLeverage) -Inf else
(0.05 + -0.05 / (1 - (Leverage / MaxLeverage))) * ExpectedReturn
PositionSizePenalty <- if(!IgnorePositionSize & any(abs(Quantities * Candidates$Price) > MaxPositionSize * pmax(Leverage, 1) * PortfolioValue)) -Inf else 0
TargetVolatilityPenalty <- if(UseSD == 0) -Inf else -log(UseSD * sqrt(PeriodsPerYear) / TargetVolatility)^2 * 20 * ExpectedReturn
TransactionCostPenalty <- -2 * sum(CalcTransCost(Candidates$TCPriceTrading, abs(Candidates$CurrentQuantity - Quantities), Candidates$TCAvgVolume, Candidates$TCVolatility) * abs(Candidates$CurrentQuantity - Quantities) * Candidates$Price) / PortfolioValue
UtilityScore <-
if(UseSD == 0) -Inf else
Return / UseSD * sqrt(PeriodsPerYear) +
(LeveragePenalty + PositionSizePenalty + TargetVolatilityPenalty + TransactionCostPenalty) / pmax(UseSD * sqrt(PeriodsPerYear), TargetVolatility)
Utility <- data.frame(NoOfLongPositions=LongPositions, NoOfShortPositions=ShortPositions, Leverage=Leverage, Beta=Beta,
SD=SD, PCA_SD=PCA_SD, Return=Return, LeveragePenalty=LeveragePenalty,
TargetVolatilityPenalty=TargetVolatilityPenalty, PositionSizePenalty=PositionSizePenalty,
TransactionCostPenalty=TransactionCostPenalty, Score=UtilityScore)
}
BestUtility <- UtilityFunction(Quantities, T)
BestUtility
source('D:/MindlessInvesting/R/Scripts/EquityModelPortfolioOptimisation.R')
BestUtility
Utility <- BestUtility
Iteration <- 0
Iterations <- data.frame()
MaxPositionsUtility <- BestUtility
MaxPositionsQuantities <- numeric()
repeat {
Iterations <- rbind(Iterations, data.frame(Iteration=Iteration, Utility=BestUtility))
Iteration <- Iteration + 1
NewQuantities <- rep(1, times = 2 * NoOfSymbols) %*% t(Quantities) + Steps
for (i in 1:(2 * NoOfSymbols)) {
NewQuantities[i, NewQuantities[i, ] != 0 & abs(NewQuantities[i, ]) * Candidates$Price * Candidates$BetaPrediction <
sum(abs(NewQuantities[i, ] * Candidates$Price)) / NoOfPositionsToKeep / 4 &
abs(NewQuantities[i, ]) < abs(Quantities)] <- 0
}
NewUtilities <- foreach (Row = 1:nrow(NewQuantities), .combine=rbind) %do% UtilityFunction(NewQuantities[Row, ])
}
Iterations <- rbind(Iterations, data.frame(Iteration=Iteration, Utility=BestUtility))
Iteration <- Iteration + 1
NewQuantities <- rep(1, times = 2 * NoOfSymbols) %*% t(Quantities) + Steps
for (i in 1:(2 * NoOfSymbols)) {
NewQuantities[i, NewQuantities[i, ] != 0 & abs(NewQuantities[i, ]) * Candidates$Price * Candidates$BetaPrediction <
sum(abs(NewQuantities[i, ] * Candidates$Price)) / NoOfPositionsToKeep / 4 &
abs(NewQuantities[i, ]) < abs(Quantities)] <- 0
}
NewUtilities <- foreach (Row = 1:nrow(NewQuantities), .combine=rbind) %do% UtilityFunction(NewQuantities[Row, ])
NewUtilities
PortfolioValue
BestUtility <- UtilityFunction(Quantities)
while(BestUtility$PositionSizePenalty == -Inf & any(Quantities != 0)) {
Quantities <- Quantities - sign(Quantities) * pmin(abs(Quantities), 100)
BestUtility <- UtilityFunction(Quantities)
}
Quantities
Quantities <- Candidates$CurrentQuantity
BestUtility <- UtilityFunction(Quantities)
while(BestUtility$PositionSizePenalty == -Inf & any(Quantities != 0)) {
Quantities <- Quantities - sign(Quantities) * pmax(rep(0, times=length(Quantities)), abs(Quantities) - MinSteps)
BestUtility <- UtilityFunction(Quantities)
}
Quantities
Iterations <- rbind(Iterations, data.frame(Iteration=Iteration, Utility=BestUtility))
Iteration <- Iteration + 1
NewQuantities <- rep(1, times = 2 * NoOfSymbols) %*% t(Quantities) + Steps
i <- 1
ewQuantities[i, NewQuantities[i, ] != 0 & abs(NewQuantities[i, ]) * Candidates$Price * Candidates$BetaPrediction <
sum(abs(NewQuantities[i, ] * Candidates$Price)) / NoOfPositionsToKeep / 4 &
abs(NewQuantities[i, ]) < abs(Quantities)]
NewQuantities[i, NewQuantities[i, ] != 0 & abs(NewQuantities[i, ]) * Candidates$Price * Candidates$BetaPrediction <
sum(abs(NewQuantities[i, ] * Candidates$Price)) / NoOfPositionsToKeep / 4 &
abs(NewQuantities[i, ]) < abs(Quantities)]
NewQuantities[sign(NewQuantities) * Candidates$LongOrShort == -1]
NewQuantities[sign(NewQuantities[i, ]) * Candidates$LongOrShort == -1]
sign(NewQuantities[i, ]) * Candidates$LongOrShort
source('D:/MindlessInvesting/R/Scripts/EquityModelPortfolioOptimisation.R')
debugSource('D:/MindlessInvesting/R/Scripts/EquityModelPortfolioOptimisation.R')
dbGetQuery(MDC,
paste(sep="\n",
sprintf("select PP.EntityId, E.Symbol, sign(sum(coalesce(PP.Quantity, 0))) as LongOrShort, "),
sprintf("convert(float, sum(PP.Quantity)) as CurrentQuantity, avg(PP.Price) as Price, sum(PP.Amount) as CurrentAmount,"),
sprintf("avg(coalesce(iif(PP.Quantity>0, R.%sLongPred, -R.%sShortPred), 0)) as AlphaPrediction, ",
Divination$ShortName, Divination$ShortName),
sprintf("avg(PCR.ChangeVolPrediction) as VolatilityPrediction, ",
Divination$ShortName, Divination$ShortName),
sprintf("avg(coalesce(PC.BetaPrediction, case when PP.Quantity > 0 then 1.25 else 0.75 end)) as BetaPrediction,"),
sprintf("coalesce(exp(PC.ActualNext1WLogChange)-1, -999) as ActualReturn1W,"),
sprintf("coalesce(exp(PC.ActualNext4WLogChange)-1, -999) as ActualReturn4W,"),
sprintf("2*dbo.CalcTransCost(TCPriceTrading, 20000/nullif(TCPriceTrading, 0), TCAvgVolumn13W_WMavg * TCSplitFactor, TCVolatility, null) as Penalty,"),
sprintf("TCPriceTrading, TCAvgVolumn13W_WMavg * TCSplitFactor as TCAvgVolume, TCVolatility"),
sprintf("from PortfolioPositionsByDatePlus PP"),
sprintf("join PriceChangesRankings PCR"),
sprintf("on PCR.EntityId = PP.EntityId"),
sprintf("and PCR.Date = PP.Date"),
sprintf("join Entities E"),
sprintf("on E.EntityId = PP.EntityId"),
sprintf("and E.EntityType <> 'X'"),
sprintf("left outer join %sRankings R", Divination$SourceView),
sprintf("on R.EntityId = PP.EntityId"),
sprintf("and R.Date = PP.Date"),
sprintf("and iif(PP.Quantity>0, R.%sLongPred, R.%sShortPred) is not null", Divination$ShortName, Divination$ShortName),
sprintf("and iif(PP.Quantity>0, R.%sLongStdDev, R.%sShrtStdDev) > 0", Divination$ShortName, Divination$ShortName),
sprintf("left outer join PriceChanges PC"),
sprintf("on PC.EntityId = PP.EntityId"),
sprintf("and PC.Date = PP.Date"),
sprintf("left outer loop join ("),
sprintf("  select EntityID as TCEntityId, Date as TCDate, [Close] as TCPriceTrading,"),
sprintf("  convert(real, AdjVolume13W_WMAvg) as TCAvgVolumn13W_WMavg, "),
sprintf("  convert(real, Volume) / nullif(AdjVolume, 0) as TCSplitFactor,"),
sprintf("  Prev52WAnnualStdevLogChange as TCVolatility"),
sprintf("  from PriceChanges"),
sprintf(") as TC"),
sprintf("on TC.TCEntityId = PP.EntityId"),
sprintf("and TC.TCDate = (select max(Date) from PriceChanges where EntityId = PP.EntityId and Date <= PP.Date)"),
sprintf("where PP.PortfolioEntityId = %i", PortfolioEntityId),
sprintf("and PP.Date = '%s'", Date),
sprintf("group by PP.EntityId, E.Symbol, PC.ActualNext1WLogChange, PC.ActualNext4WLogChange, "),
sprintf("TCPriceTrading, TCAvgVolumn13W_WMavg, TCSplitFactor, TCVolatility"),
sprintf("having sum(PP.Quantity) <> 0")
)
MDC <- dbConnect("SqlServer", url=ConnectionString, timeout=600)
dbGetQuery(MDC,
paste(sep="\n",
sprintf("select PP.EntityId, E.Symbol, sign(sum(coalesce(PP.Quantity, 0))) as LongOrShort, "),
sprintf("convert(float, sum(PP.Quantity)) as CurrentQuantity, avg(PP.Price) as Price, sum(PP.Amount) as CurrentAmount,"),
sprintf("avg(coalesce(iif(PP.Quantity>0, R.%sLongPred, -R.%sShortPred), 0)) as AlphaPrediction, ",
Divination$ShortName, Divination$ShortName),
sprintf("avg(PCR.ChangeVolPrediction) as VolatilityPrediction, ",
Divination$ShortName, Divination$ShortName),
sprintf("avg(coalesce(PC.BetaPrediction, case when PP.Quantity > 0 then 1.25 else 0.75 end)) as BetaPrediction,"),
sprintf("coalesce(exp(PC.ActualNext1WLogChange)-1, -999) as ActualReturn1W,"),
sprintf("coalesce(exp(PC.ActualNext4WLogChange)-1, -999) as ActualReturn4W,"),
sprintf("2*dbo.CalcTransCost(TCPriceTrading, 20000/nullif(TCPriceTrading, 0), TCAvgVolumn13W_WMavg * TCSplitFactor, TCVolatility, null) as Penalty,"),
sprintf("TCPriceTrading, TCAvgVolumn13W_WMavg * TCSplitFactor as TCAvgVolume, TCVolatility"),
sprintf("from PortfolioPositionsByDatePlus PP"),
sprintf("join PriceChangesRankings PCR"),
sprintf("on PCR.EntityId = PP.EntityId"),
sprintf("and PCR.Date = PP.Date"),
sprintf("join Entities E"),
sprintf("on E.EntityId = PP.EntityId"),
sprintf("and E.EntityType <> 'X'"),
sprintf("left outer join %sRankings R", Divination$SourceView),
sprintf("on R.EntityId = PP.EntityId"),
sprintf("and R.Date = PP.Date"),
sprintf("and iif(PP.Quantity>0, R.%sLongPred, R.%sShortPred) is not null", Divination$ShortName, Divination$ShortName),
sprintf("and iif(PP.Quantity>0, R.%sLongStdDev, R.%sShrtStdDev) > 0", Divination$ShortName, Divination$ShortName),
sprintf("left outer join PriceChanges PC"),
sprintf("on PC.EntityId = PP.EntityId"),
sprintf("and PC.Date = PP.Date"),
sprintf("left outer loop join ("),
sprintf("  select EntityID as TCEntityId, Date as TCDate, [Close] as TCPriceTrading,"),
sprintf("  convert(real, AdjVolume13W_WMAvg) as TCAvgVolumn13W_WMavg, "),
sprintf("  convert(real, Volume) / nullif(AdjVolume, 0) as TCSplitFactor,"),
sprintf("  Prev52WAnnualStdevLogChange as TCVolatility"),
sprintf("  from PriceChanges"),
sprintf(") as TC"),
sprintf("on TC.TCEntityId = PP.EntityId"),
sprintf("and TC.TCDate = (select max(Date) from PriceChanges where EntityId = PP.EntityId and Date <= PP.Date)"),
sprintf("where PP.PortfolioEntityId = %i", PortfolioEntityId),
sprintf("and PP.Date = '%s'", Date),
sprintf("group by PP.EntityId, E.Symbol, PC.ActualNext1WLogChange, PC.ActualNext4WLogChange, "),
sprintf("TCPriceTrading, TCAvgVolumn13W_WMavg, TCSplitFactor, TCVolatility"),
sprintf("having sum(PP.Quantity) <> 0")))
View(
paste(sep="\n",
sprintf("select PP.EntityId, E.Symbol, sign(sum(coalesce(PP.Quantity, 0))) as LongOrShort, "),
sprintf("convert(float, sum(PP.Quantity)) as CurrentQuantity, avg(PP.Price) as Price, sum(PP.Amount) as CurrentAmount,"),
sprintf("avg(coalesce(iif(PP.Quantity>0, R.%sLongPred, -R.%sShortPred), 0)) as AlphaPrediction, ",
Divination$ShortName, Divination$ShortName),
sprintf("avg(PCR.ChangeVolPrediction) as VolatilityPrediction, ",
Divination$ShortName, Divination$ShortName),
sprintf("avg(coalesce(PC.BetaPrediction, case when PP.Quantity > 0 then 1.25 else 0.75 end)) as BetaPrediction,"),
sprintf("coalesce(exp(PC.ActualNext1WLogChange)-1, -999) as ActualReturn1W,"),
sprintf("coalesce(exp(PC.ActualNext4WLogChange)-1, -999) as ActualReturn4W,"),
sprintf("2*dbo.CalcTransCost(TCPriceTrading, 20000/nullif(TCPriceTrading, 0), TCAvgVolumn13W_WMavg * TCSplitFactor, TCVolatility, null) as Penalty,"),
sprintf("TCPriceTrading, TCAvgVolumn13W_WMavg * TCSplitFactor as TCAvgVolume, TCVolatility"),
sprintf("from PortfolioPositionsByDatePlus PP"),
sprintf("join PriceChangesRankings PCR"),
sprintf("on PCR.EntityId = PP.EntityId"),
sprintf("and PCR.Date = PP.Date"),
sprintf("join Entities E"),
sprintf("on E.EntityId = PP.EntityId"),
sprintf("and E.EntityType <> 'X'"),
sprintf("left outer join %sRankings R", Divination$SourceView),
sprintf("on R.EntityId = PP.EntityId"),
sprintf("and R.Date = PP.Date"),
sprintf("and iif(PP.Quantity>0, R.%sLongPred, R.%sShortPred) is not null", Divination$ShortName, Divination$ShortName),
sprintf("and iif(PP.Quantity>0, R.%sLongStdDev, R.%sShrtStdDev) > 0", Divination$ShortName, Divination$ShortName),
sprintf("left outer join PriceChanges PC"),
sprintf("on PC.EntityId = PP.EntityId"),
sprintf("and PC.Date = PP.Date"),
sprintf("left outer loop join ("),
sprintf("  select EntityID as TCEntityId, Date as TCDate, [Close] as TCPriceTrading,"),
sprintf("  convert(real, AdjVolume13W_WMAvg) as TCAvgVolumn13W_WMavg, "),
sprintf("  convert(real, Volume) / nullif(AdjVolume, 0) as TCSplitFactor,"),
sprintf("  Prev52WAnnualStdevLogChange as TCVolatility"),
sprintf("  from PriceChanges"),
sprintf(") as TC"),
sprintf("on TC.TCEntityId = PP.EntityId"),
sprintf("and TC.TCDate = (select max(Date) from PriceChanges where EntityId = PP.EntityId and Date <= PP.Date)"),
sprintf("where PP.PortfolioEntityId = %i", PortfolioEntityId),
sprintf("and PP.Date = '%s'", Date),
sprintf("group by PP.EntityId, E.Symbol, PC.ActualNext1WLogChange, PC.ActualNext4WLogChange, "),
sprintf("TCPriceTrading, TCAvgVolumn13W_WMavg, TCSplitFactor, TCVolatility"),
sprintf("having sum(PP.Quantity) <> 0")))
dbGetQuery(MDC,
paste(sep="\n",
sprintf("select PP.EntityId, E.Symbol, convert(int, sign(sum(coalesce(PP.Quantity, 0)))) as LongOrShort, "),
sprintf("convert(float, sum(PP.Quantity)) as CurrentQuantity, avg(PP.Price) as Price, sum(PP.Amount) as CurrentAmount,"),
sprintf("avg(coalesce(iif(PP.Quantity>0, R.%sLongPred, -R.%sShortPred), 0)) as AlphaPrediction, ",
Divination$ShortName, Divination$ShortName),
sprintf("avg(PCR.ChangeVolPrediction) as VolatilityPrediction, ",
Divination$ShortName, Divination$ShortName),
sprintf("avg(coalesce(PC.BetaPrediction, case when PP.Quantity > 0 then 1.25 else 0.75 end)) as BetaPrediction,"),
sprintf("coalesce(exp(PC.ActualNext1WLogChange)-1, -999) as ActualReturn1W,"),
sprintf("coalesce(exp(PC.ActualNext4WLogChange)-1, -999) as ActualReturn4W,"),
sprintf("2*dbo.CalcTransCost(TCPriceTrading, 20000/nullif(TCPriceTrading, 0), TCAvgVolumn13W_WMavg * TCSplitFactor, TCVolatility, null) as Penalty,"),
sprintf("TCPriceTrading, TCAvgVolumn13W_WMavg * TCSplitFactor as TCAvgVolume, TCVolatility"),
sprintf("from PortfolioPositionsByDatePlus PP"),
sprintf("join PriceChangesRankings PCR"),
sprintf("on PCR.EntityId = PP.EntityId"),
sprintf("and PCR.Date = PP.Date"),
sprintf("join Entities E"),
sprintf("on E.EntityId = PP.EntityId"),
sprintf("and E.EntityType <> 'X'"),
sprintf("left outer join %sRankings R", Divination$SourceView),
sprintf("on R.EntityId = PP.EntityId"),
sprintf("and R.Date = PP.Date"),
sprintf("and iif(PP.Quantity>0, R.%sLongPred, R.%sShortPred) is not null", Divination$ShortName, Divination$ShortName),
sprintf("and iif(PP.Quantity>0, R.%sLongStdDev, R.%sShrtStdDev) > 0", Divination$ShortName, Divination$ShortName),
sprintf("left outer join PriceChanges PC"),
sprintf("on PC.EntityId = PP.EntityId"),
sprintf("and PC.Date = PP.Date"),
sprintf("left outer loop join ("),
sprintf("  select EntityID as TCEntityId, Date as TCDate, [Close] as TCPriceTrading,"),
sprintf("  convert(real, AdjVolume13W_WMAvg) as TCAvgVolumn13W_WMavg, "),
sprintf("  convert(real, Volume) / nullif(AdjVolume, 0) as TCSplitFactor,"),
sprintf("  Prev52WAnnualStdevLogChange as TCVolatility"),
sprintf("  from PriceChanges"),
sprintf(") as TC"),
sprintf("on TC.TCEntityId = PP.EntityId"),
sprintf("and TC.TCDate = (select max(Date) from PriceChanges where EntityId = PP.EntityId and Date <= PP.Date)"),
sprintf("where PP.PortfolioEntityId = %i", PortfolioEntityId),
sprintf("and PP.Date = '%s'", Date),
sprintf("group by PP.EntityId, E.Symbol, PC.ActualNext1WLogChange, PC.ActualNext4WLogChange, "),
sprintf("TCPriceTrading, TCAvgVolumn13W_WMavg, TCSplitFactor, TCVolatility"),
sprintf("having sum(PP.Quantity) <> 0")
))
MDC <- dbConnect("SqlServer", url=ConnectionString, timeout=600)
dbGetQuery(MDC,
paste(sep="\n",
sprintf("select PP.EntityId, E.Symbol, convert(int, sign(sum(coalesce(PP.Quantity, 0)))) as LongOrShort, "),
sprintf("convert(float, sum(PP.Quantity)) as CurrentQuantity, avg(PP.Price) as Price, sum(PP.Amount) as CurrentAmount,"),
sprintf("avg(coalesce(iif(PP.Quantity>0, R.%sLongPred, -R.%sShortPred), 0)) as AlphaPrediction, ",
Divination$ShortName, Divination$ShortName),
sprintf("avg(PCR.ChangeVolPrediction) as VolatilityPrediction, ",
Divination$ShortName, Divination$ShortName),
sprintf("avg(coalesce(PC.BetaPrediction, case when PP.Quantity > 0 then 1.25 else 0.75 end)) as BetaPrediction,"),
sprintf("coalesce(exp(PC.ActualNext1WLogChange)-1, -999) as ActualReturn1W,"),
sprintf("coalesce(exp(PC.ActualNext4WLogChange)-1, -999) as ActualReturn4W,"),
sprintf("2*dbo.CalcTransCost(TCPriceTrading, 20000/nullif(TCPriceTrading, 0), TCAvgVolumn13W_WMavg * TCSplitFactor, TCVolatility, null) as Penalty,"),
sprintf("TCPriceTrading, TCAvgVolumn13W_WMavg * TCSplitFactor as TCAvgVolume, TCVolatility"),
sprintf("from PortfolioPositionsByDatePlus PP"),
sprintf("join PriceChangesRankings PCR"),
sprintf("on PCR.EntityId = PP.EntityId"),
sprintf("and PCR.Date = PP.Date"),
sprintf("join Entities E"),
sprintf("on E.EntityId = PP.EntityId"),
sprintf("and E.EntityType <> 'X'"),
sprintf("left outer join %sRankings R", Divination$SourceView),
sprintf("on R.EntityId = PP.EntityId"),
sprintf("and R.Date = PP.Date"),
sprintf("and iif(PP.Quantity>0, R.%sLongPred, R.%sShortPred) is not null", Divination$ShortName, Divination$ShortName),
sprintf("and iif(PP.Quantity>0, R.%sLongStdDev, R.%sShrtStdDev) > 0", Divination$ShortName, Divination$ShortName),
sprintf("left outer join PriceChanges PC"),
sprintf("on PC.EntityId = PP.EntityId"),
sprintf("and PC.Date = PP.Date"),
sprintf("left outer loop join ("),
sprintf("  select EntityID as TCEntityId, Date as TCDate, [Close] as TCPriceTrading,"),
sprintf("  convert(real, AdjVolume13W_WMAvg) as TCAvgVolumn13W_WMavg, "),
sprintf("  convert(real, Volume) / nullif(AdjVolume, 0) as TCSplitFactor,"),
sprintf("  Prev52WAnnualStdevLogChange as TCVolatility"),
sprintf("  from PriceChanges"),
sprintf(") as TC"),
sprintf("on TC.TCEntityId = PP.EntityId"),
sprintf("and TC.TCDate = (select max(Date) from PriceChanges where EntityId = PP.EntityId and Date <= PP.Date)"),
sprintf("where PP.PortfolioEntityId = %i", PortfolioEntityId),
sprintf("and PP.Date = '%s'", Date),
sprintf("group by PP.EntityId, E.Symbol, PC.ActualNext1WLogChange, PC.ActualNext4WLogChange, "),
sprintf("TCPriceTrading, TCAvgVolumn13W_WMavg, TCSplitFactor, TCVolatility"),
sprintf("having sum(PP.Quantity) <> 0")
))
dbGetQuery(MDC,
paste(sep="\n",
sprintf("select top %i R.EntityId, E.Symbol, 1 as LongOrShort, ", NoOfCandidatesToDownload / 2),
sprintf("0 as CurrentQuantity, PC.[Close] as Price, 0 as CurrentAmount,"),
sprintf("coalesce(R.%sLongPred, 0) as AlphaPrediction, ", Divination$ShortName),
sprintf("PCR.ChangeVolPrediction as VolatilityPrediction, ", Divination$ShortName),
sprintf("coalesce(PC.BetaPrediction, 0.75) as BetaPrediction,"),
sprintf("coalesce(exp(PC.ActualNext1WLogChange)-1, -999) as ActualReturn1W,"),
sprintf("coalesce(exp(PC.ActualNext4WLogChange)-1, -999) as ActualReturn4W,"),
sprintf("2*dbo.CalcTransCost(TCPriceTrading, 20000/nullif(TCPriceTrading, 0), TCAvgVolumn13W_WMavg * TCSplitFactor, TCVolatility, null) as Penalty,"),
sprintf("TCPriceTrading, TCAvgVolumn13W_WMavg * TCSplitFactor as TCAvgVolume, TCVolatility"),
sprintf("from %sRankings R", Divination$SourceView),
sprintf("join PriceChangesRankings PCR"),
sprintf("on PCR.EntityId = R.EntityId"),
sprintf("and PCR.Date = R.Date"),
sprintf("join Entities E"),
sprintf("on E.EntityId = R.EntityId"),
sprintf("left outer join PriceChanges PC"),
sprintf("on PC.EntityId = R.EntityId"),
sprintf("and PC.Date = R.Date"),
sprintf("left outer loop join ("),
sprintf("  select EntityID as TCEntityId, Date as TCDate, [Close] as TCPriceTrading,"),
sprintf("  convert(real, AdjVolume13W_WMAvg) as TCAvgVolumn13W_WMavg, "),
sprintf("  convert(real, Volume) / nullif(AdjVolume, 0) as TCSplitFactor,"),
sprintf("  Prev52WAnnualStdevLogChange as TCVolatility"),
sprintf("  from PriceChanges"),
sprintf(") as TC"),
sprintf("on TC.TCEntityId = R.EntityId"),
sprintf("and TC.TCDate = (select max(Date) from PriceChanges where EntityId = R.EntityId and Date <= R.Date)"),
sprintf("where R.PassesFilter = 1"),
sprintf("and R.Passes%sFilter = 1", Divination$Name),
sprintf("and R.Date = '%s'", Date),
sprintf("and R.%sLongPred is not null", Divination$ShortName),
sprintf("and R.%sLongStdDev > 0", Divination$ShortName),
if (nrow(PortfolioPositions) > 0)
sprintf("and R.EntityId not in (%s)", paste(PortfolioPositions$EntityId, collapse=", ")),
sprintf("order by R.%sLongRskRwd desc", Divination$ShortName)
))
debugSource('D:/MindlessInvesting/R/Scripts/EquityModelPortfolioOptimisation.R')
NewQuantities[sign(NewQuantities[i, ]) * Candidates$LongOrShort == -1]
sign(NewQuantities[i, ]) * Candidates$LongOrShort
NewQuantities[i, ][sign(NewQuantities[i, ]) * Candidates$LongOrShort == -1]
debugSource('D:/MindlessInvesting/R/Scripts/EquityModelPortfolioOptimisation.R')
NewQuantities
Test <- foreach (Row = 1:nrow(NewQuantities, .combine=rbind, .inorder=T)) if (any(NewQuantities[Row, ] != Quantities)) NewQuantities[Row, ]
Test <- foreach (Row = 1:nrow(NewQuantities, .combine=rbind, .inorder=T)) { if (any(NewQuantities[Row, ] != Quantities)) { NewQuantities[Row, ] } else { NULL } }
Test <- foreach (Row = 1:nrow(NewQuantities, .combine=rbind, .inorder=T)) if (any(NewQuantities[Row, ] != Quantities)) { NewQuantities[Row, ] } else { NULL }
Test <- foreach (Row = 1:nrow(NewQuantities, .combine=rbind, .inorder=T)) %do% if (any(NewQuantities[Row, ] != Quantities)) { NewQuantities[Row, ] } else { NULL }
Test <- foreach (Row = 1:nrow(NewQuantities), .combine=rbind, .inorder=T) %do% if (any(NewQuantities[Row, ] != Quantities)) { NewQuantities[Row, ] } else { NULL }
dim(Test)
nrows(NewQuantities)
dim(NewQuantities)
Test <- foreach (Row = 1:nrow(NewQuantities), .combine=rbind, .inorder=T) %do% if (any(NewQuantities[Row, ] != Quantities)) NewQuantities[Row, ]
dim(Test)
NewQuantities <-
foreach (Row = 1:nrow(NewQuantities), .combine=rbind, .inorder=T) %do% if (any(NewQuantities[Row, ] != Quantities)) NewQuantities[Row, ]
NewUtilities <- foreach (Row = 1:nrow(NewQuantities), .combine=rbind) %do% UtilityFunction(NewQuantities[Row, ])
NewUtility <- NewUtilities[NewUtilities$Score == max(NewUtilities$Score), ]
if (NewUtility$Score <= BestUtility$Score) {
break
}
NewUtility$Score
BestUtility$Score
BestUtility <- NewUtility
Quantities <- NewQuantities[NewUtilities$Score==BestUtility$Score,]
if (!is.null(nrow(Quantities)))
if (nrow(Quantities) > 1) {
Quantities <- Quantities[1, ]
if (sum(Quantities != 0) >= NoOfPositionsToKeep) {
}
if (BestUtility$Score <= MaxPositionsUtility$Score) {
BestUtility <- MaxPositionsUtility
Quantities <- MaxPositionsQuantities
break
}
else {
MaxPositionsUtility <- BestUtility
MaxPositionsQuantities <- Quantities
for (j in 1:(NoOfPositionsToKeep / 10)) {
NewQuantities <- ((rep(1, times = NoOfSymbols) %*% t(Quantities)) * ClosePositionMultiplier)[Quantities != 0, ]
NewUtilities <- foreach (Row = 1:nrow(NewQuantities), .combine=rbind) %do% UtilityFunction(NewQuantities[Row, ])
NewUtility <- NewUtilities[NewUtilities$Score == max(NewUtilities$Score), ]
Quantities <- NewQuantities[NewUtilities$Score==NewUtility$Score,]
if (nrow(Quantities) > 1) {
Quantities <- Quantities[1, ]
}
if (!is.null(nrow(Quantities)))
}
Log("%i : Long=%i, Shorts=%i, Leverage=%.1f, Beta=%.1f, Return=%.1f%%, SD=%.1f%%, PCA-SD=%.1f%%, LeveragePen=%.2f%%, TargetVolPen=%.2f%%, TransCostPen==%.2f%%, Score=%.3f\n",
Iteration, BestUtility$NoOfLongPositions, BestUtility$NoOfShortPositions, BestUtility$Leverage, BestUtility$Beta,
100*(((BestUtility$Return + 1) ^ 2 - pmax(BestUtility$SD, BestUtility$PCA_SD)^2)^(PeriodsPerYear / 2) - 1),
BestUtility <- NewUtility
source('D:/MindlessInvesting/R/Scripts/EquityModelPortfolioOptimisation.R')
source('~/.active-rstudio-document')
options(error=browser)
source('D:/MindlessInvesting/R/Scripts/EquityModelPortfolioOptimisation.R')
colnames(Returns)
dim(Returns)
View(paste(sep="\n",
sprintf("select D.Date,"),
paste0(paste0("coalesce(avg(iif(P.EntityId = ", Candidates$EntityId, ", P.AdjLogChange, null)), -999) as \"",
Candidates$Symbol), "\"", collapse=",\n"),
sprintf("from DailyDates D"),
sprintf("left outer join Prices P"),
sprintf("on P.Date = D.Date"),
sprintf("where D.Date between DateAdd(year, -3, '%s') and '%s'", Date, Date),
sprintf("and P.EntityId in (%s)", paste(Candidates$EntityId, collapse=", ")),
sprintf("group by D.Date"),
sprintf("order by D.Date desc")
))
View(paste(sep="\n",
sprintf("select top %i R.EntityId, E.Symbol, 1 as LongOrShort, ", NoOfCandidatesToDownload / 2),
sprintf("0 as CurrentQuantity, PC.[Close] as Price, 0 as CurrentAmount,"),
sprintf("coalesce(R.%sLongPred, 0) as AlphaPrediction, ", Divination$ShortName),
sprintf("PCR.ChangeVolPrediction as VolatilityPrediction, ", Divination$ShortName),
sprintf("coalesce(PC.BetaPrediction, 0.75) as BetaPrediction,"),
sprintf("coalesce(exp(PC.ActualNext1WLogChange)-1, -999) as ActualReturn1W,"),
sprintf("coalesce(exp(PC.ActualNext4WLogChange)-1, -999) as ActualReturn4W,"),
sprintf("2*dbo.CalcTransCost(TCPriceTrading, 20000/nullif(TCPriceTrading, 0), TCAvgVolumn13W_WMavg * TCSplitFactor, TCVolatility, null) as Penalty,"),
sprintf("TCPriceTrading, TCAvgVolumn13W_WMavg * TCSplitFactor as TCAvgVolume, TCVolatility"),
sprintf("from %sRankings R", Divination$SourceView),
sprintf("join PriceChangesRankings PCR"),
sprintf("on PCR.EntityId = R.EntityId"),
sprintf("and PCR.Date = R.Date"),
sprintf("join Entities E"),
sprintf("on E.EntityId = R.EntityId"),
sprintf("left outer join PriceChanges PC"),
sprintf("on PC.EntityId = R.EntityId"),
sprintf("and PC.Date = R.Date"),
sprintf("left outer loop join ("),
sprintf("  select EntityID as TCEntityId, Date as TCDate, [Close] as TCPriceTrading,"),
sprintf("  convert(real, AdjVolume13W_WMAvg) as TCAvgVolumn13W_WMavg, "),
sprintf("  convert(real, Volume) / nullif(AdjVolume, 0) as TCSplitFactor,"),
sprintf("  Prev52WAnnualStdevLogChange as TCVolatility"),
sprintf("  from PriceChanges"),
sprintf(") as TC"),
sprintf("on TC.TCEntityId = R.EntityId"),
sprintf("and TC.TCDate = (select max(Date) from PriceChanges where EntityId = R.EntityId and Date <= R.Date)"),
sprintf("where R.PassesFilter = 1"),
sprintf("and R.Passes%sFilter = 1", Divination$Name),
sprintf("and R.Date = '%s'", Date),
sprintf("and R.%sLongPred is not null", Divination$ShortName),
sprintf("and R.%sLongStdDev > 0", Divination$ShortName),
if (nrow(PortfolioPositions) > 0)
sprintf("and R.EntityId not in (%s)", paste(PortfolioPositions$EntityId, collapse=", ")),
sprintf("order by R.%sLongRskRwd desc", Divination$ShortName)
))
source('~/.active-rstudio-document')
source('D:/MindlessInvesting/R/Scripts/EquityModelPortfolioOptimisation.R')
NoOfSymbols
dim(MinSteps)
length(MinSteps)
MinSteps
PortfolioValue
Date
PortfolioEntityId
((1.03)^2-0.01^2)^(13/2)-1
((1.04)^2-0.01^2)^(13/2)-1
((1.06)^2-0.01^2)^(13/2)-1
source('~/.active-rstudio-document')
source('D:/MindlessInvesting/R/Scripts/EquityModelPortfolioOptimisation.R')
